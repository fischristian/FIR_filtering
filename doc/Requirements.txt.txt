Requirements:
-	FIR Filtering Module:
 o	Functional: 
	Apply Filter to original image and calculate resulting image
	Do not save resulting image to disk (?)
	Pass filter coefficients as std::vector<float>
	Filter coefficients must not be changed during calculation
	Must use n Threads, n >= 1, each thread executes own calculation

 o	Structural:
	Filter API to setup filter
	Workerthread class with n instantiations
	Structure to save filter coefficients
	Check for valid coefficients, valid image, valid number of threads

-	Testapplication:
 o	Functional:
	Pass filter coefficients to filtering module
	Set number of execution threads of filtering module
	Open / pass image file to library
	Measure “filtered images per second”
	Start / stop filter library?

 o	Structural:
	User input coefficients?
	User input image file?
	User input number of threads?

-	General: 
 o	Only use open source / free available software
 o	Document instructions to build the tools
 o	Test the program with different inputs
 o	Use Windows, Linux, or both
 o	Target x86 or x86_64
 o	If Windows, use native compilation, not clr
